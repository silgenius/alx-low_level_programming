!<arch>
0-isupper.c/    0           0     0     644     212       `
#include "main.h"

/**
* _isupper - a function that checks for uppercase character.
* @c: char to be checked
* Return: 0 (success)
*/
int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
		return (1);
	return (0);
}
0-memset.c/     0           0     0     644     406       `
#include "main.h"
#include <string.h>

/**
 * char *_memset - The _memset() function fills
 * the first n bytes of the memory area pointed to by s
 * with the constant byte b
 *
 * @s: char
 * @b: char (The value to be set)
 * @n: The number of bytes to be set in the memory block
 * Return:  a pointer to the memory area s
 */
char *_memset(char *s, char b, unsigned int n)
{
	return (memset(s, b, n));
}
0-strcat.c/     0           0     0     644     377       `
#include "main.h"
#include <string.h>
/**
 * _strcat -   a  function appends the src string to the dest string,
 * overwriting the terminating null byte (\0) at the end of dest,
 * and then adds a terminating null byte
 * @src: char
 * @dest: char
 * Return: pointer to the resulting string dest
 */
char *_strcat(char *dest, char *src)
{
	strcat(dest, src);
	return (dest);
}

100-atoi.c/     0           0     0     644     572       `
#include "main.h"
#include <string.h>

/**
 * _atoi -  a function that convert a string to an integer.
 * @s: char
 * Return: int (result)
 */
int _atoi(char *s)
{
	double result = 0;
	int sign = 1;
	int j = 0;
	int len = strlen(s);

	while (j < len)
	{
		if (s[j] >= '0' && s[j] <= '9')
		{
			result = result * 10 + (s[j] - '0');
			if (!(s[j + 1] >= '0' && s[j + 1] <= '9'))
				j = len; /* break out of the loop if next str is not an int*/
		}
		else if (s[j] == '-')
			sign *= -1;
		else if (s[j] == '+')
			sign *= 1;
		j++;
	}
	result *= sign;
	return (result);
}
1-isdigit.c/    0           0     0     644     200       `
#include "main.h"

/**
* _isdigit - a function that checks for a digit.
* @c: char to be checked
* Return: 0 (success)
*/
int _isdigit(int c)
{
	if (c >= '0' && c <= '9')
		return (1);
	return (0);
}
1-memcpy.c/     0           0     0     644     310       `
#include "main.h"
#include <string.h>

/**
 * _memcpy - The _memcpy() function copies n bytes
 * from memory area src to memory area dest
 *
 * @dest: char
 * @src: char
 * @n: int
 * Return: a pointer to dest
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	memcpy(dest, src, n);
	return (dest);
}
1-strncat.c/    0           0     0     644     289       `
#include "main.h"
#include <string.h>
/**
 * _strncat -   a  function appends the src string to the dest
 *
 * @src: char
 * @dest: char
 * @n: int
 * Return: pointer to the resulting string dest
 */
char *_strncat(char *dest, char *src, int n)
{
	strncat(dest, src, n);
	return (dest);
}

2-strchr.c/     0           0     0     644     473       `
#include "main.h"
#include <stddef.h>

/**
 * _strchr - Returns a pointer to the first occurrence of the character c
 * from memory area src to memory area dest
 *
 * @s: char
 * @c: char to checked
 * Return: the first occurrence of the character c in the string s,
 * or NULL if the character is not found
 */
char *_strchr(char *s, char c)
{
	while (*s != '\0')
	{
		if (*s == c)
			return ((char *) s);
		s++;
	}

	if (*s == c)
		return ((char *)s);

	return (NULL);
}

2-strlen.c/     0           0     0     644     260       `
#include "main.h"

/**
 * _strlen -   a function that returns the length of a string.
 *
 * @s: char
 * Return: int (the length of a string)
 */
int _strlen(char *s)
{
	int i, length;

	length = 0;
	for (i = 0; s[i]; i++)
	{
		length++;
	}
	return (length);
}
2-strncpy.c/    0           0     0     644     255       `
#include "main.h"
#include <string.h>

/**
 * _strncpy -  a function that prints a string, in reverse.
 *
 * @src: char
 * @dest: char
 * @n: int
 * Return: dest
 */
char *_strncpy(char *dest, char *src, int n)
{
	strncpy(dest, src, n);
	return (dest);
}

3-islower.c/    0           0     0     644     272       `
#include "main.h"

/**
 * _islower - Entry point
 *
 * Description: Write a function that checks
 * for lowercase character.
 *
 * @c: char to be checked
 *
 * Return: Always 0 (Success)
 *
 */
int _islower(int c)
{
	if (c >= 'a' && c <= 'z')
		return (1);
	return (0);
}
3-puts.c/       0           0     0     644     264       `
#include "main.h"

/**
 * _puts -   a function that prints a string,
 * followed by a new line, to stdout
 *
 * @str: char to be printed
 * Return: nothing
 */
void _puts(char *str)
{
	int i;

	for (i = 0; str[i]; i++)
	{
		_putchar(str[i]);
	}
	_putchar('\n');
}
3-strcmp.c/     0           0     0     644     255       `
#include "main.h"
#include <string.h>

/**
 * _strcmp - a function that compares two strings.
 *
 * @s1: first char
 * @s2: second char
 * Return: Always 0.
 */
int _strcmp(char *s1, char *s2)
{
	int result;

	result = strcmp(s1, s2);
	return (result);
}

3-strspn.c/     0           0     0     644     535       `
#include "main.h"

/**
 * _strspn - a function that gets the length of a prefix substring
 * from memory area src to memory area dest
 *
 * @s: char
 * @accept: char
 * Return: number of bytes in the initial segment of s
 * which consist only of bytes from accept
 */
unsigned int _strspn(char *s, char *accept)
{
	int count;

	count = 0;

	while (*s != '\0')
	{
		const char *a = accept;

		while (*a != '\0')
		{
			if (*s == *a)
			{
				count++;
				break;
			}
			a++;
		}
		if (*a == '\0')
			break;
		s++;
	}
	return (count);
}

4-isalpha.c/    0           0     0     644     315       `
#include "main.h"

/**
 * _isalpha - Entry point
 *
 * @c: alphabet to be checked
 *
 * Description: Write a function that checks
 * for lowercase and uppercase character.
 * Return: Always 0 (Success)
 *
 */
int _isalpha(int c)
{
	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
		return (1);
	return (0);
}

4-strpbrk.c/    0           0     0     644     474       `
#include "main.h"
#include <stddef.h>
/**
 * _strpbrk - a function that searches a string
 * for any of a set of bytes.
 *
 * @accept: char
 * @s: char
 * Return:  a pointer to the byte in s that
 * matches one of the bytes in accept
 * or NULL if no such byte is found
 */
char *_strpbrk(char *s, char *accept)
{
	int i, j;

	i = 0;

	while (s[i])
	{
		for (j = 0; accept[j]; j++)
		{
			if (s[i] == accept[j])
			{
				return (s + i);
			}
		}
		i++;
	}
	return (NULL);
}
5-strstr.c/     0           0     0     644     554       `
#include "main.h"
#include <stddef.h>
/**
 * _strstr -  a function that locates a substring.
 *
 * @haystack: char
 * @needle: char
 * Return:   pointer to the beginning of the located substring,
 * or NULL if the substring is not found.
 */
char *_strstr(char *haystack, char *needle)
{
	if (*needle == '\0')
		return ((char *) haystack);
	while (*haystack != '\0')
	{
		char *h = haystack;
		char *n = needle;

		while (*n != '\0' && *h == *n)
		{
			n++;
			h++;
		}
		if (*n == '\0')
			return ((char *) haystack);
		haystack++;
	}
	return (NULL);
}
6-abs.c/        0           0     0     644     259       `
#include "main.h"

/**
 * _abs - Entry point
 *
 * Description:  a function that computes
 * the absolute value of an integer.
 *
 * @n: digit to be converted
 *
 * Return: Always 0 (Success)
 */
int _abs(int n)
{
	if (n < 0)
	{
		n = -(n);
	}
	return (n);
}

9-strcpy.c/     0           0     0     644     373       `
#include "main.h"

/**
 * _strcpy - a function that copies the string pointed to by src,
 * including the terminating null byte (\0),
 * to the buffer pointed to by dest
 *
 * @dest : char
 * @src: char
 * Return: the pointer to dest
 */
char *_strcpy(char *dest, char *src)
{
	int i;

	for (i = 0; src[i]; i++)
	{
		dest[i] = src[i];
	}
	dest[i] = '\0';
	return (dest);
}

_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

